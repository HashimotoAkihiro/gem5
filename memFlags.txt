./latex/classArmISA_1_1MicroNeonMemOp.tex:unsigned \hyperlink{classArmISA_1_1MicroNeonMemOp_a827c936c9e2b1f1cf21a01f204a8d821}{memAccessFlags}
./latex/classArmISA_1_1MicroNeonMemOp.tex:123               memAccessFlags(TLB::MustBeOne)
./latex/classArmISA_1_1MicroNeonMemOp.tex:\index{ArmISA::MicroNeonMemOp@{ArmISA::MicroNeonMemOp}!memAccessFlags@{memAccessFlags}}
./latex/classArmISA_1_1MicroNeonMemOp.tex:\index{memAccessFlags@{memAccessFlags}!ArmISA::MicroNeonMemOp@{ArmISA::MicroNeonMemOp}}
./latex/classArmISA_1_1MicroNeonMemOp.tex:\subsubsection[{memAccessFlags}]{\setlength{\rightskip}{0pt plus 5cm}unsigned {\bf memAccessFlags}\hspace{0.3cm}{\ttfamily  \mbox{[}protected\mbox{]}}}}
./latex/classArmISA_1_1Memory64.tex:unsigned \hyperlink{classArmISA_1_1Memory64_a827c936c9e2b1f1cf21a01f204a8d821}{memAccessFlags}
./latex/classArmISA_1_1Memory64.tex:76         memAccessFlags |= Request::LLSC;
./latex/classArmISA_1_1Memory64.tex:78         memAccessFlags |= ArmISA::TLB::AllowUnaligned;
./latex/classArmISA_1_1Memory64.tex:\index{ArmISA::Memory64@{ArmISA::Memory64}!memAccessFlags@{memAccessFlags}}
./latex/classArmISA_1_1Memory64.tex:\index{memAccessFlags@{memAccessFlags}!ArmISA::Memory64@{ArmISA::Memory64}}
./latex/classArmISA_1_1Memory64.tex:\subsubsection[{memAccessFlags}]{\setlength{\rightskip}{0pt plus 5cm}unsigned {\bf memAccessFlags}\hspace{0.3cm}{\ttfamily  \mbox{[}protected\mbox{]}}}}
./latex/classPowerISA_1_1MemOp.tex:unsigned \hyperlink{classPowerISA_1_1MemOp_a827c936c9e2b1f1cf21a01f204a8d821}{memAccessFlags}
./latex/classPowerISA_1_1MemOp.tex:58         memAccessFlags(0),
./latex/classPowerISA_1_1MemOp.tex:\index{PowerISA::MemOp@{PowerISA::MemOp}!memAccessFlags@{memAccessFlags}}
./latex/classPowerISA_1_1MemOp.tex:\index{memAccessFlags@{memAccessFlags}!PowerISA::MemOp@{PowerISA::MemOp}}
./latex/classPowerISA_1_1MemOp.tex:\subsubsection[{memAccessFlags}]{\setlength{\rightskip}{0pt plus 5cm}unsigned {\bf memAccessFlags}\hspace{0.3cm}{\ttfamily  \mbox{[}protected\mbox{]}}}}
./latex/classArmISA_1_1MicroMemOp.tex:unsigned \hyperlink{classArmISA_1_1MicroMemOp_a827c936c9e2b1f1cf21a01f204a8d821}{memAccessFlags}
./latex/classArmISA_1_1MicroMemOp.tex:391               up(_up), memAccessFlags(TLB::MustBeOne | TLB::AlignWord)
./latex/classArmISA_1_1MicroMemOp.tex:\index{ArmISA::MicroMemOp@{ArmISA::MicroMemOp}!memAccessFlags@{memAccessFlags}}
./latex/classArmISA_1_1MicroMemOp.tex:\index{memAccessFlags@{memAccessFlags}!ArmISA::MicroMemOp@{ArmISA::MicroMemOp}}
./latex/classArmISA_1_1MicroMemOp.tex:\subsubsection[{memAccessFlags}]{\setlength{\rightskip}{0pt plus 5cm}unsigned {\bf memAccessFlags}\hspace{0.3cm}{\ttfamily  \mbox{[}protected\mbox{]}}}}
./arch/alpha/isa/mem.isa:        Request::Flags memAccessFlags;
./arch/alpha/isa/mem.isa:            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
./arch/alpha/isa/mem.isa:            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
./arch/alpha/isa/mem.isa:                    memAccessFlags, NULL);
./arch/alpha/isa/mem.isa:                    memAccessFlags, &write_result);
./arch/alpha/isa/mem.isa:                    memAccessFlags, NULL);
./arch/alpha/isa/mem.isa:        s = '\n\tmemAccessFlags = ' + string.join(mem_flags, '|') + ';'
./arch/alpha/isa/pal.isa:        memAccessFlags.clear();
./arch/alpha/isa/pal.isa:        if (HW_LDST_PHYS) memAccessFlags.set(Request::PHYSICAL);
./arch/alpha/isa/pal.isa:        if (HW_LDST_ALT)  memAccessFlags.set(Request::ALTMODE);
./arch/alpha/isa/pal.isa:        if (HW_LDST_VPTE) memAccessFlags.set(Request::VPTE);
./arch/alpha/isa/pal.isa:        if (HW_LDST_LOCK) memAccessFlags.set(Request::LLSC);
./arch/power/isa/formats/mem.isa:            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
./arch/power/isa/formats/mem.isa:            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
./arch/power/isa/formats/mem.isa:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/power/isa/formats/mem.isa:            fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/power/isa/formats/util.isa:        s = '\n\tmemAccessFlags = ' + string.join(mem_flags, '|') + ';'
./arch/power/insts/mem.hh:    unsigned memAccessFlags;
./arch/power/insts/mem.hh:        memAccessFlags(0),
./arch/mips/isa/formats/simd-mem.isa~:        Request::Flags memAccessFlags;
./arch/mips/isa/formats/simd-mem.isa~:            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
./arch/mips/isa/formats/simd-mem.isa~:            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
./arch/mips/isa/formats/simd-mem.isa~:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/simd-mem.isa~:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/simd-mem.isa~:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/simd-mem.isa~:            fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/simd-mem.isa~:        fault = readMemAtomic(xc, traceData, EA, mem_word, memAccessFlags);
./arch/mips/isa/formats/mem.isa:        Request::Flags memAccessFlags;
./arch/mips/isa/formats/mem.isa:            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
./arch/mips/isa/formats/mem.isa:            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
./arch/mips/isa/formats/mem.isa:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/mem.isa:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/mem.isa:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/mem.isa:            fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/mem.isa:        fault = readMemAtomic(xc, traceData, EA, mem_word, memAccessFlags);
./arch/mips/isa/formats/simd_qmem.isa:        Request::Flags memAccessFlags;
./arch/mips/isa/formats/simd_qmem.isa:            fault = readMemAtomic(xc, traceData, EA, SMem, memAccessFlags);
./arch/mips/isa/formats/simd_qmem.isa:            fault = readSMemTiming(xc, traceData, EA, SMem, memAccessFlags);
./arch/mips/isa/formats/simd_qmem.isa:            fault = writeSMemAtomic(xc, traceData, SMem, EA, memAccessFlags,
./arch/mips/isa/formats/simd_qmem.isa:	  fault = writeSMemAtomic(xc, traceData, SMem, EA, memAccessFlags,)
./arch/mips/isa/formats/simd_qmem.isa:            fault = writeSMemAtomic(xc, traceData, SMem, EA, memAccessFlags,
./arch/mips/isa/formats/simd_qmem.isa:            fault = writeMemTiming(xc, traceData, SMem, EA, memAccessFlags,
./arch/mips/isa/formats/simd_qmem.isa:        fault = readMemAtomic(xc, traceData, EA, mem_word, memAccessFlags);
./arch/mips/isa/formats/mem.isa~:        Request::Flags memAccessFlags;
./arch/mips/isa/formats/mem.isa~:            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
./arch/mips/isa/formats/mem.isa~:            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
./arch/mips/isa/formats/mem.isa~:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/mem.isa~:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/mem.isa~:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/mem.isa~:            fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/mips/isa/formats/mem.isa~:        fault = readMemAtomic(xc, traceData, EA, mem_word, memAccessFlags);
./arch/mips/isa/formats/util.isa:        s = '\n\tmemAccessFlags = ' + string.join(mem_flags, '|') + ';'
./arch/mips/isa/formats/simd-qmem.isa~:        Request::Flags memAccessFlags;
./arch/mips/isa/formats/simd-qmem.isa~:            fault = readMemAtomic(xc, traceData, EA, SMem.data, memAccessFlags);
./arch/mips/isa/formats/simd-qmem.isa~:            fault = readMemTiming(xc, traceData, EA, SMem.data, memAccessFlags);
./arch/mips/isa/formats/simd-qmem.isa~:            fault = writeMemAtomic(xc, traceData, SMem.data, EA, memAccessFlags,
./arch/mips/isa/formats/simd-qmem.isa~:            fault = writeMemAtomic(xc, traceData, SMem.data, EA, memAccessFlags,
./arch/mips/isa/formats/simd-qmem.isa~:            fault = writeMemTiming(xc, traceData, SMem.data, EA, memAccessFlags,
./arch/mips/isa/formats/simd_qmem.isa~:        Request::Flags memAccessFlags;
./arch/mips/isa/formats/simd_qmem.isa~:            fault = readMemAtomic(xc, traceData, EA, SMem, memAccessFlags);
./arch/mips/isa/formats/simd_qmem.isa~:            fault = readSMemTiming(xc, traceData, EA, SMem, memAccessFlags);
./arch/mips/isa/formats/simd_qmem.isa~:            fault = writeSMemAtomic(xc, traceData, SMem, EA, memAccessFlags,
./arch/mips/isa/formats/simd_qmem.isa~:	  fault = writeSMemAtomic(xc, traceData, SMem, EA, memAccessFlags,)
./arch/mips/isa/formats/simd_qmem.isa~:            fault = writeSMemAtomic(xc, traceData, SMem, EA, memAccessFlags,
./arch/mips/isa/formats/simd_qmem.isa~:            fault = writeMemTiming(xc, traceData, SMem, EA, memAccessFlags,
./arch/mips/isa/formats/simd_qmem.isa~:        fault = readMemAtomic(xc, traceData, EA, mem_word, memAccessFlags);
./arch/mips/isa/formats/util.isa~:        s = '\n\tmemAccessFlags = ' + string.join(mem_flags, '|') + ';'
./arch/arm/isa/templates/macromem.isa:            memAccessFlags |= extraMemFlags;
./arch/arm/isa/templates/neon64.isa:            memAccessFlags |= extraMemFlags;
./arch/arm/isa/templates/neon64.isa:            fault = xc->readMem(EA, dataPtr, accSize, memAccessFlags);
./arch/arm/isa/templates/neon64.isa:            fault = xc->readMem(EA, dataPtr, accSize, memAccessFlags);
./arch/arm/isa/templates/neon64.isa:            fault = xc->writeMem(dataPtr, accSize, EA, memAccessFlags,
./arch/arm/isa/templates/neon64.isa:            fault = xc->writeMem(memUnion.bytes, accSize, EA, memAccessFlags,
./arch/arm/isa/templates/mem.isa:                fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/arm/isa/templates/mem.isa:                fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/arm/isa/templates/mem.isa:                fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
./arch/arm/isa/templates/mem.isa:                fault = xc->readMem(EA, dataPtr, %(size)d, memAccessFlags);
./arch/arm/isa/templates/mem.isa:                        memAccessFlags, NULL);
./arch/arm/isa/templates/mem.isa:                                     memAccessFlags, NULL);
./arch/arm/isa/templates/mem.isa:                fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/arm/isa/templates/mem.isa:                fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/arm/isa/templates/mem.isa:                fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/arm/isa/templates/mem.isa:                                     memAccessFlags, NULL);
./arch/arm/isa/templates/mem.isa:                fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
./arch/arm/isa/templates/mem.isa:                fault = xc->readMem(EA, dataPtr, %(size)d, memAccessFlags);
./arch/arm/isa/templates/mem64.isa:            fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
./arch/arm/isa/templates/mem64.isa:                                   memAccessFlags, NULL);
./arch/arm/isa/templates/mem64.isa:            fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/arm/isa/templates/mem64.isa:            fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
./arch/arm/isa/templates/mem64.isa:            fault = writeMemTiming(xc, traceData, Mem, EA, memAccessFlags,
./arch/arm/isa/templates/mem64.isa:            fault = readMemTiming(xc, traceData, EA, Mem, memAccessFlags);
./arch/arm/isa/templates/mem64.isa:            fault = xc->writeMem(NULL, op_size, EA, memAccessFlags, NULL);
./arch/arm/isa/templates/mem64.isa:            fault = xc->writeMem(NULL, op_size, EA, memAccessFlags, NULL);
./arch/arm/isa/insts/data64.isa:           Request::Flags memAccessFlags = Request::CACHE_BLOCK_ZERO|ArmISA::TLB::MustBeOne;
./arch/arm/isa/insts/mem.isa:            eaCode += '\n    unsigned memAccessFlags = '
./arch/arm/isa/insts/branch.isa:            unsigned memAccessFlags = ArmISA::TLB::AllowUnaligned |
./arch/arm/isa/insts/branch.isa:            unsigned memAccessFlags = ArmISA::TLB::AllowUnaligned |
./arch/arm/insts/mem64.hh:    unsigned memAccessFlags;
./arch/arm/insts/mem64.cc:        memAccessFlags |= Request::LLSC;
./arch/arm/insts/mem64.cc:        memAccessFlags |= ArmISA::TLB::AllowUnaligned;
./arch/arm/insts/macromem.hh:    unsigned memAccessFlags;
./arch/arm/insts/macromem.hh:              memAccessFlags(TLB::MustBeOne)
./arch/arm/insts/macromem.hh:    unsigned memAccessFlags;
./arch/arm/insts/macromem.hh:              up(_up), memAccessFlags(TLB::MustBeOne | TLB::AlignWord)
./html/classArmISA_1_1MicroNeonMemOp-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1MicroNeonMemOp.html">MicroNeonMemOp</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1Memory64.html:<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td></tr>
./html/classArmISA_1_1Memory64.html:<a name="l00076"></a>00076         <a class="code" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a> |= <a class="code" href="classRequest.html#ae940f472047b661a3913d069f9c3bea3">Request::LLSC</a>;
./html/classArmISA_1_1Memory64.html:<a name="l00078"></a>00078         <a class="code" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a> |= <a class="code" href="classArmISA_1_1TLB.html#a1e31c6b4a233c7e98a3e85eba0c84f0dac6aa9917fe5880558d8ee22e2fbcbe58">ArmISA::TLB::AllowUnaligned</a>;
./html/classArmISA_1_1Memory64.html:<a class="anchor" id="a827c936c9e2b1f1cf21a01f204a8d821"></a><!-- doxytag: member="ArmISA::Memory64::memAccessFlags" ref="a827c936c9e2b1f1cf21a01f204a8d821" args="" -->
./html/classArmISA_1_1Memory64.html:          <td class="memname">unsigned <a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a><code> [protected]</code></td>
./html/mem64_8hh_source.html:<a name="l00124"></a><a class="code" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">00124</a>     <span class="keywordtype">unsigned</span> <a class="code" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a>;
./html/classArmISA_1_1MemoryReg64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1MemoryLiteral64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/power_2insts_2mem_8hh_source.html:<a name="l00047"></a><a class="code" href="classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">00047</a>     <span class="keywordtype">unsigned</span> <a class="code" href="classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" title="Memory request flags. See mem_req_base.hh.">memAccessFlags</a>;
./html/power_2insts_2mem_8hh_source.html:<a name="l00058"></a>00058         <a class="code" href="classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" title="Memory request flags. See mem_req_base.hh.">memAccessFlags</a>(0),
./html/classArmISA_1_1MicroMemOp-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1MicroMemOp.html">MicroMemOp</a></td><td><code> [protected]</code></td></tr>
./html/classPowerISA_1_1MemDispOp-members.html:  <tr class="memlist"><td><a class="el" href="classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classPowerISA_1_1MemOp.html">MemOp</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1MemoryPreIndex64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1MicroMemOp.html:<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td></tr>
./html/classArmISA_1_1MicroMemOp.html:<a name="l00391"></a>00391               <a class="code" href="classArmISA_1_1MicroMemOp.html#a7155f867ab504d48e40f4b43a4d9daf6">up</a>(_up), <a class="code" href="classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a>(<a class="code" href="classArmISA_1_1TLB.html#a1e31c6b4a233c7e98a3e85eba0c84f0daf6e40c9fd5825f3b3a4f2d45d4a64c68">TLB::MustBeOne</a> | <a class="code" href="classArmISA_1_1TLB.html#a1e31c6b4a233c7e98a3e85eba0c84f0da7aed72b8cf399f281ad8558187fe6941">TLB::AlignWord</a>)
./html/classArmISA_1_1MicroMemOp.html:<a class="anchor" id="a827c936c9e2b1f1cf21a01f204a8d821"></a><!-- doxytag: member="ArmISA::MicroMemOp::memAccessFlags" ref="a827c936c9e2b1f1cf21a01f204a8d821" args="" -->
./html/classArmISA_1_1MicroMemOp.html:          <td class="memname">unsigned <a class="el" href="classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a><code> [protected]</code></td>
./html/functions_vars_0x6d.html:<li>memAccessFlags
./html/classArmISA_1_1MemoryRaw64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1MicroNeonMemOp.html:<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td></tr>
./html/classArmISA_1_1MicroNeonMemOp.html:<a name="l00123"></a>00123               <a class="code" href="classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a>(<a class="code" href="classArmISA_1_1TLB.html#a1e31c6b4a233c7e98a3e85eba0c84f0daf6e40c9fd5825f3b3a4f2d45d4a64c68">TLB::MustBeOne</a>)
./html/classArmISA_1_1MicroNeonMemOp.html:<a class="anchor" id="a827c936c9e2b1f1cf21a01f204a8d821"></a><!-- doxytag: member="ArmISA::MicroNeonMemOp::memAccessFlags" ref="a827c936c9e2b1f1cf21a01f204a8d821" args="" -->
./html/classArmISA_1_1MicroNeonMemOp.html:          <td class="memname">unsigned <a class="el" href="classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a><code> [protected]</code></td>
./html/classPowerISA_1_1MemOp-members.html:  <tr class="memlist"><td><a class="el" href="classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classPowerISA_1_1MemOp.html">MemOp</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1MemoryDImmEx64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1Memory64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1MemoryImm64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/classArmISA_1_1MemoryPostIndex64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/classPowerISA_1_1MemOp.html:<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td></tr>
./html/classPowerISA_1_1MemOp.html:<a name="l00058"></a>00058         <a class="code" href="classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" title="Memory request flags. See mem_req_base.hh.">memAccessFlags</a>(0),
./html/classPowerISA_1_1MemOp.html:<a class="anchor" id="a827c936c9e2b1f1cf21a01f204a8d821"></a><!-- doxytag: member="PowerISA::MemOp::memAccessFlags" ref="a827c936c9e2b1f1cf21a01f204a8d821" args="" -->
./html/classPowerISA_1_1MemOp.html:          <td class="memname">unsigned <a class="el" href="classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a><code> [protected]</code></td>
./html/macromem_8hh_source.html:<a name="l00117"></a><a class="code" href="classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">00117</a>     <span class="keywordtype">unsigned</span> <a class="code" href="classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a>;
./html/macromem_8hh_source.html:<a name="l00123"></a>00123               <a class="code" href="classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a>(<a class="code" href="classArmISA_1_1TLB.html">TLB</a>::MustBeOne)
./html/macromem_8hh_source.html:<a name="l00386"></a><a class="code" href="classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">00386</a>     <span class="keywordtype">unsigned</span> <a class="code" href="classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a>;
./html/macromem_8hh_source.html:<a name="l00391"></a>00391               <a class="code" href="classArmISA_1_1MicroMemOp.html#a7155f867ab504d48e40f4b43a4d9daf6">up</a>(_up), <a class="code" href="classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a>(<a class="code" href="classArmISA_1_1TLB.html">TLB</a>::MustBeOne | <a class="code" href="classArmISA_1_1TLB.html">TLB</a>::AlignWord)
./html/classArmISA_1_1MemoryDImm64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/functions_0x6d.html:<li>memAccessFlags
./html/classArmISA_1_1MemoryEx64-members.html:  <tr class="memlist"><td><a class="el" href="classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821">memAccessFlags</a></td><td><a class="el" href="classArmISA_1_1Memory64.html">Memory64</a></td><td><code> [protected]</code></td></tr>
./html/search/variables_6d.html:  <a id="Item973" onkeydown="return searchResults.Nav(event,973)" onkeypress="return searchResults.Nav(event,973)" onkeyup="return searchResults.Nav(event,973)" class="SRSymbol" href="javascript:searchResults.Toggle('SR_memaccessflags')">memAccessFlags</a>
./html/search/variables_6d.html:    <a id="Item973_c0" onkeydown="return searchResults.NavChild(event,973,0)" onkeypress="return searchResults.NavChild(event,973,0)" onkeyup="return searchResults.NavChild(event,973,0)" class="SRScope" href="../classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" target="basefrm">ArmISA::MicroNeonMemOp::memAccessFlags()</a>
./html/search/variables_6d.html:    <a id="Item973_c1" onkeydown="return searchResults.NavChild(event,973,1)" onkeypress="return searchResults.NavChild(event,973,1)" onkeyup="return searchResults.NavChild(event,973,1)" class="SRScope" href="../classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" target="basefrm">ArmISA::MicroMemOp::memAccessFlags()</a>
./html/search/variables_6d.html:    <a id="Item973_c2" onkeydown="return searchResults.NavChild(event,973,2)" onkeypress="return searchResults.NavChild(event,973,2)" onkeyup="return searchResults.NavChild(event,973,2)" class="SRScope" href="../classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821" target="basefrm">ArmISA::Memory64::memAccessFlags()</a>
./html/search/variables_6d.html:    <a id="Item973_c3" onkeydown="return searchResults.NavChild(event,973,3)" onkeypress="return searchResults.NavChild(event,973,3)" onkeyup="return searchResults.NavChild(event,973,3)" class="SRScope" href="../classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" target="basefrm">PowerISA::MemOp::memAccessFlags()</a>
./html/search/all_6d.html:  <a id="Item1268" onkeydown="return searchResults.Nav(event,1268)" onkeypress="return searchResults.Nav(event,1268)" onkeyup="return searchResults.Nav(event,1268)" class="SRSymbol" href="javascript:searchResults.Toggle('SR_memaccessflags')">memAccessFlags</a>
./html/search/all_6d.html:    <a id="Item1268_c0" onkeydown="return searchResults.NavChild(event,1268,0)" onkeypress="return searchResults.NavChild(event,1268,0)" onkeyup="return searchResults.NavChild(event,1268,0)" class="SRScope" href="../classArmISA_1_1MicroNeonMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" target="basefrm">ArmISA::MicroNeonMemOp::memAccessFlags()</a>
./html/search/all_6d.html:    <a id="Item1268_c1" onkeydown="return searchResults.NavChild(event,1268,1)" onkeypress="return searchResults.NavChild(event,1268,1)" onkeyup="return searchResults.NavChild(event,1268,1)" class="SRScope" href="../classArmISA_1_1MicroMemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" target="basefrm">ArmISA::MicroMemOp::memAccessFlags()</a>
./html/search/all_6d.html:    <a id="Item1268_c2" onkeydown="return searchResults.NavChild(event,1268,2)" onkeypress="return searchResults.NavChild(event,1268,2)" onkeyup="return searchResults.NavChild(event,1268,2)" class="SRScope" href="../classArmISA_1_1Memory64.html#a827c936c9e2b1f1cf21a01f204a8d821" target="basefrm">ArmISA::Memory64::memAccessFlags()</a>
./html/search/all_6d.html:    <a id="Item1268_c3" onkeydown="return searchResults.NavChild(event,1268,3)" onkeypress="return searchResults.NavChild(event,1268,3)" onkeyup="return searchResults.NavChild(event,1268,3)" class="SRScope" href="../classPowerISA_1_1MemOp.html#a827c936c9e2b1f1cf21a01f204a8d821" target="basefrm">PowerISA::MemOp::memAccessFlags()</a>
