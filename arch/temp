./x86/isa/insts/__init__.py:              "simd128",
./x86/isa/insts/__init__.py:              "simd64",
./x86/isa/insts/simd64/floating_point/data_conversion.py:# CVTPS2PI, CVTTPS2PI, CVTPD2PI, and CVTTPD2PI are implemented in simd128
./x86/isa/insts/simd64/integer/data_conversion.py:# CVTPI2PS and CVTPI2PD are implemented in simd128
./x86/SConscript:        'simd128/__init__.py',
./x86/SConscript:        'simd128/integer/__init__.py',
./x86/SConscript:        'simd128/integer/data_transfer/__init__.py',
./x86/SConscript:        'simd128/integer/data_transfer/move.py',
./x86/SConscript:        'simd128/integer/data_transfer/move_non_temporal.py',
./x86/SConscript:        'simd128/integer/data_transfer/move_mask.py',
./x86/SConscript:        'simd128/integer/data_conversion/__init__.py',
./x86/SConscript:        'simd128/integer/data_conversion/convert_mmx_integer_to_floating_point.py',
./x86/SConscript:        'simd128/integer/data_conversion/convert_integer_to_floating_point.py',
./x86/SConscript:        'simd128/integer/data_conversion/convert_gpr_integer_to_floating_point.py',
./x86/SConscript:        'simd128/integer/data_reordering/__init__.py',
./x86/SConscript:        'simd128/integer/data_reordering/unpack_and_interleave.py',
./x86/SConscript:        'simd128/integer/data_reordering/pack_with_saturation.py',
./x86/SConscript:        'simd128/integer/data_reordering/extract_and_insert.py',
./x86/SConscript:        'simd128/integer/data_reordering/shuffle.py',
./x86/SConscript:        'simd128/integer/arithmetic/__init__.py',
./x86/SConscript:        'simd128/integer/arithmetic/subtraction.py',
./x86/SConscript:        'simd128/integer/arithmetic/addition.py',
./x86/SConscript:        'simd128/integer/arithmetic/multiplication.py',
./x86/SConscript:        'simd128/integer/arithmetic/multiply_add.py',
./x86/SConscript:        'simd128/integer/arithmetic/average.py',
./x86/SConscript:        'simd128/integer/arithmetic/sum_of_absolute_differences.py',
./x86/SConscript:        'simd128/integer/shift/__init__.py',
./x86/SConscript:        'simd128/integer/shift/right_arithmetic_shift.py',
./x86/SConscript:        'simd128/integer/shift/left_logical_shift.py',
./x86/SConscript:        'simd128/integer/shift/right_logical_shift.py',
./x86/SConscript:        'simd128/integer/compare/__init__.py',
./x86/SConscript:        'simd128/integer/compare/compare_and_write_mask.py',
./x86/SConscript:        'simd128/integer/compare/compare_and_write_minimum_or_maximum.py',
./x86/SConscript:        'simd128/integer/logical/__init__.py',
./x86/SConscript:        'simd128/integer/logical/pand.py',
./x86/SConscript:        'simd128/integer/logical/por.py',
./x86/SConscript:        'simd128/integer/logical/exclusive_or.py',
./x86/SConscript:        'simd128/integer/save_and_restore_state/__init__.py',
./x86/SConscript:        'simd128/integer/save_and_restore_state/save_and_restore_state.py',
./x86/SConscript:        'simd128/integer/save_and_restore_state/save_and_restore_control_and_status.py',
./x86/SConscript:        'simd128/floating_point/__init__.py',
./x86/SConscript:        'simd128/floating_point/data_transfer/__init__.py',
./x86/SConscript:        'simd128/floating_point/data_transfer/move_mask.py',
./x86/SConscript:        'simd128/floating_point/data_transfer/move.py',
./x86/SConscript:        'simd128/floating_point/data_transfer/move_with_duplication.py',
./x86/SConscript:        'simd128/floating_point/data_transfer/move_non_temporal.py',
./x86/SConscript:        'simd128/floating_point/data_conversion/__init__.py',
./x86/SConscript:        'simd128/floating_point/data_conversion/convert_floating_point_to_floating_point.py',
./x86/SConscript:        'simd128/floating_point/data_conversion/convert_floating_point_to_xmm_integer.py',
./x86/SConscript:        'simd128/floating_point/data_conversion/convert_floating_point_to_mmx_integer.py',
./x86/SConscript:        'simd128/floating_point/data_conversion/convert_floating_point_to_gpr_integer.py',
./x86/SConscript:        'simd128/floating_point/data_reordering/__init__.py',
./x86/SConscript:        'simd128/floating_point/data_reordering/unpack_and_interleave.py',
./x86/SConscript:        'simd128/floating_point/data_reordering/shuffle.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/__init__.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/subtraction.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/addition.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/horizontal_subtraction.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/horizontal_addition.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/square_root.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/simultaneous_addition_and_subtraction.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/multiplication.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/division.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/reciprocal_square_root.py',
./x86/SConscript:        'simd128/floating_point/arithmetic/reciprocal_estimation.py',
./x86/SConscript:        'simd128/floating_point/compare/__init__.py',
./x86/SConscript:        'simd128/floating_point/compare/compare_and_write_mask.py',
./x86/SConscript:        'simd128/floating_point/compare/compare_and_write_rflags.py',
./x86/SConscript:        'simd128/floating_point/compare/compare_and_write_minimum_or_maximum.py',
./x86/SConscript:        'simd128/floating_point/logical/__init__.py',
./x86/SConscript:        'simd128/floating_point/logical/andp.py',
./x86/SConscript:        'simd128/floating_point/logical/orp.py',
./x86/SConscript:        'simd128/floating_point/logical/exclusive_or.py',
./x86/SConscript:        'simd64/__init__.py',
./x86/SConscript:        'simd64/integer/__init__.py',
./x86/SConscript:        'simd64/integer/data_transfer/__init__.py',
./x86/SConscript:        'simd64/integer/data_transfer/move_mask.py',
./x86/SConscript:        'simd64/integer/data_transfer/move.py',
./x86/SConscript:        'simd64/integer/data_transfer/move_non_temporal.py',
./x86/SConscript:        'simd64/integer/exit_media_state.py',
./x86/SConscript:        'simd64/integer/data_reordering/__init__.py',
./x86/SConscript:        'simd64/integer/data_reordering/unpack_and_interleave.py',
./x86/SConscript:        'simd64/integer/data_reordering/pack_with_saturation.py',
./x86/SConscript:        'simd64/integer/data_reordering/extract_and_insert.py',
./x86/SConscript:        'simd64/integer/data_reordering/shuffle_and_swap.py',
./x86/SConscript:        'simd64/integer/data_conversion.py',
./x86/SConscript:        'simd64/integer/arithmetic/__init__.py',
./x86/SConscript:        'simd64/integer/arithmetic/subtraction.py',
./x86/SConscript:        'simd64/integer/arithmetic/addition.py',
./x86/SConscript:        'simd64/integer/arithmetic/multiplication.py',
./x86/SConscript:        'simd64/integer/arithmetic/multiply_add.py',
./x86/SConscript:        'simd64/integer/arithmetic/average.py',
./x86/SConscript:        'simd64/integer/arithmetic/sum_of_absolute_differences.py',
./x86/SConscript:        'simd64/integer/shift/__init__.py',
./x86/SConscript:        'simd64/integer/shift/right_arithmetic_shift.py',
./x86/SConscript:        'simd64/integer/shift/left_logical_shift.py',
./x86/SConscript:        'simd64/integer/shift/right_logical_shift.py',
./x86/SConscript:        'simd64/integer/compare/__init__.py',
./x86/SConscript:        'simd64/integer/compare/compare_and_write_mask.py',
./x86/SConscript:        'simd64/integer/compare/compare_and_write_minimum_or_maximum.py',
./x86/SConscript:        'simd64/integer/logical/__init__.py',
./x86/SConscript:        'simd64/integer/logical/pand.py',
./x86/SConscript:        'simd64/integer/logical/por.py',
./x86/SConscript:        'simd64/integer/logical/exclusive_or.py',
./x86/SConscript:        'simd64/integer/save_and_restore_state.py',
./x86/SConscript:        'simd64/floating_point/__init__.py',
./x86/SConscript:        'simd64/floating_point/arithmetic/__init__.py',
./x86/SConscript:        'simd64/floating_point/arithmetic/subtraction.py',
./x86/SConscript:        'simd64/floating_point/arithmetic/addition.py',
./x86/SConscript:        'simd64/floating_point/arithmetic/reciprocal_estimation.py',
./x86/SConscript:        'simd64/floating_point/arithmetic/multiplication.py',
./x86/SConscript:        'simd64/floating_point/arithmetic/accumulation.py',
./x86/SConscript:        'simd64/floating_point/arithmetic/reciprocal_square_root.py',
./x86/SConscript:        'simd64/floating_point/data_conversion.py',
./x86/SConscript:        'simd64/floating_point/compare/__init__.py',
./x86/SConscript:        'simd64/floating_point/compare/compare_and_write_mask.py',
./x86/SConscript:        'simd64/floating_point/compare/compare_and_write_minimum_or_maximum.py',
./mips/isa/formats/formats.isa:##include "simd_alu.isa"
./mips/isa/formats/formats.isa://##include "simd_qmem.isa"
./mips/isa/formats/formats.isa~:##include "simd_alu.isa"
./mips/isa/formats/formats.isa~:##include "simd_qmem.isa"
./mips/registers.hh://add simd register 32(hh or hl or lh or ll)
./mips/registers.hh://add simd hi, lo
./mips/registers.hh~://add simd register 32(hh or hl or lh or ll)
./mips/registers.hh~://add simd hi, lo
./mips/dsp.hh:void simdPack(uint64_t *values_ptr, int32_t *reg, int32_t fmt);
./mips/dsp.hh:void simdUnpack(int32_t reg, uint64_t *values_ptr, int32_t fmt, int32_t sign);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, UNSIGNED);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./mips/dsp.cc:    simdPack(a_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, SIMD_FMT_QB, UNSIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, SIMD_FMT_PH, UNSIGNED);
./mips/dsp.cc:    simdPack(b_values, &result, SIMD_FMT_PH);
./mips/dsp.cc:    simdUnpack(a, a_values, SIMD_FMT_PH, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, SIMD_FMT_PH, SIGNED);
./mips/dsp.cc:    simdPack(c_values, &result, SIMD_FMT_W);
./mips/dsp.cc:    simdUnpack(a, a_values, infmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, infmt, SIGNED);
./mips/dsp.cc:    simdUnpack(a, a_values, infmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, infmt, SIGNED);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./mips/dsp.cc:    simdUnpack(a, in_values, infmt, insign);
./mips/dsp.cc:    simdPack(out_values, &result, outfmt);
./mips/dsp.cc:    simdUnpack(a, a_values, SIMD_FMT_PH, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, SIMD_FMT_PH, SIGNED);
./mips/dsp.cc:    simdPack(r_values, &result, SIMD_FMT_QB);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./mips/dsp.cc:    simdPack(r_values, &result, fmt + 1);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./mips/dsp.cc:    simdPack(c_values, &result, fmt + 1);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, UNSIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, UNSIGNED);
./mips/dsp.cc:    simdPack(c_values, &result, fmt);
./mips/dsp.cc:    simdUnpack(a, a_values, fmt, UNSIGNED);
./mips/dsp.cc:    simdUnpack(b, b_values, fmt, UNSIGNED);
./mips/dsp.cc:    simdPack(c_values, &result, fmt);
./mips/dsp.cc:MipsISA::simdPack(uint64_t *values_ptr, int32_t *reg, int32_t fmt)
./mips/dsp.cc:MipsISA::simdUnpack(int32_t reg, uint64_t *values_ptr, int32_t fmt, int32_t sign)
./arm/isa/formats/fp.isa:        const uint64_t bigImm = simd_modified_imm(op, cmode, imm, immValid);
./arm/isa/formats/neon64.isa:        const uint64_t bigImm = simd_modified_imm(op, cmode, abcdefgh,
./arm/isa/templates/neon64.isa:    simd64EnabledCheckCode = vfp64EnabledCheckCode
./arm/isa/templates/neon.isa:    simdEnabledCheckCode = '''
./arm/isa/insts/fp.isa:    vmovCoreRegBCode = simdEnabledCheckCode + '''
./arm/isa/insts/fp.isa:    vmovCoreRegHCode = simdEnabledCheckCode + '''
./arm/isa/insts/macromem.isa:                                  'ea_code' : simdEnabledCheckCode + eaCode,
./arm/isa/insts/macromem.isa:                                   'ea_code' : simdEnabledCheckCode + eaCode,
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:            eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:            eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        eWalkCode = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64.isa:        code = simd64EnabledCheckCode + '''
./arm/isa/insts/neon64_mem.isa:                'ea_code' : simd64EnabledCheckCode + eaCode,
./arm/isa/insts/neon64_mem.isa:                'ea_code' : simd64EnabledCheckCode + eaCode,
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:        eWalkCode = simdEnabledCheckCode + '''
./arm/isa/insts/neon.isa:            eWalkCode += simdEnabledCheckCode + '''
./arm/insts/pred_inst.hh:simd_modified_imm(bool op, uint8_t cmode, uint8_t data, bool &immValid,
./miqs/dsp.hh:void simdPack(uint64_t *values_ptr, int32_t *reg, int32_t fmt);
./miqs/dsp.hh:void simdUnpack(int32_t reg, uint64_t *values_ptr, int32_t fmt, int32_t sign);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, UNSIGNED);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./miqs/dsp.cc:    simdPack(a_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, SIMD_FMT_QB, UNSIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, SIMD_FMT_PH, UNSIGNED);
./miqs/dsp.cc:    simdPack(b_values, &result, SIMD_FMT_PH);
./miqs/dsp.cc:    simdUnpack(a, a_values, SIMD_FMT_PH, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, SIMD_FMT_PH, SIGNED);
./miqs/dsp.cc:    simdPack(c_values, &result, SIMD_FMT_W);
./miqs/dsp.cc:    simdUnpack(a, a_values, infmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, infmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(a, a_values, infmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, infmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, sign);
./miqs/dsp.cc:    simdUnpack(a, in_values, infmt, insign);
./miqs/dsp.cc:    simdPack(out_values, &result, outfmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, SIMD_FMT_PH, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, SIMD_FMT_PH, SIGNED);
./miqs/dsp.cc:    simdPack(r_values, &result, SIMD_FMT_QB);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./miqs/dsp.cc:    simdPack(r_values, &result, fmt + 1);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, SIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, SIGNED);
./miqs/dsp.cc:    simdPack(c_values, &result, fmt + 1);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, UNSIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, UNSIGNED);
./miqs/dsp.cc:    simdPack(c_values, &result, fmt);
./miqs/dsp.cc:    simdUnpack(a, a_values, fmt, UNSIGNED);
./miqs/dsp.cc:    simdUnpack(b, b_values, fmt, UNSIGNED);
./miqs/dsp.cc:    simdPack(c_values, &result, fmt);
./miqs/dsp.cc:MipsISA::simdPack(uint64_t *values_ptr, int32_t *reg, int32_t fmt)
./miqs/dsp.cc:MipsISA::simdUnpack(int32_t reg, uint64_t *values_ptr, int32_t fmt, int32_t sign)
