%!PS-Adobe-2.0 EPSF-2.0
%%Title: ClassName
%%Creator: Doxygen
%%CreationDate: Time
%%For: 
%Magnification: 1.00
%%Orientation: Portrait
%%BoundingBox: 0 0 500 731.383
%%Pages: 0
%%BeginSetup
%%EndSetup
%%EndComments

% ----- variables -----

/boxwidth 0 def
/boxheight 40 def
/fontheight 24 def
/marginwidth 10 def
/distx 20 def
/disty 40 def
/boundaspect 0.683636 def  % aspect ratio of the BoundingBox (width/height)
/boundx 500 def
/boundy boundx boundaspect div def
/xspacing 0 def
/yspacing 0 def
/rows 55 def
/cols 4 def
/scalefactor 0 def
/boxfont /Times-Roman findfont fontheight scalefont def

% ----- procedures -----

/dotted { [1 4] 0 setdash } def
/dashed { [5] 0 setdash } def
/solid  { [] 0 setdash } def

/max % result = MAX(arg1,arg2)
{
  /a exch def
  /b exch def
  a b gt {a} {b} ifelse
} def

/xoffset % result = MAX(0,(scalefactor-(boxwidth*cols+distx*(cols-1)))/2)
{
  0 scalefactor boxwidth cols mul distx cols 1 sub mul add sub 2 div max
} def

/cw % boxwidth = MAX(boxwidth, stringwidth(arg1))
{
  /str exch def
  /boxwidth boxwidth str stringwidth pop max def
} def

/box % draws a box with text `arg1' at grid pos (arg2,arg3)
{ gsave
  2 setlinewidth
  newpath
  exch xspacing mul xoffset add
  exch yspacing mul
  moveto
  boxwidth 0 rlineto 
  0 boxheight rlineto 
  boxwidth neg 0 rlineto 
  0 boxheight neg rlineto 
  closepath
  dup stringwidth pop neg boxwidth add 2 div
  boxheight fontheight 2 div sub 2 div
  rmoveto show stroke
  grestore
} def  

/mark
{ newpath
  exch xspacing mul xoffset add boxwidth add
  exch yspacing mul
  moveto
  0 boxheight 4 div rlineto
  boxheight neg 4 div boxheight neg 4 div rlineto
  closepath
  eofill
  stroke
} def

/arrow
{ newpath
  moveto
  3 -8 rlineto
  -6 0 rlineto
  3 8 rlineto
  closepath
  eofill
  stroke
} def

/out % draws an output connector for the block at (arg1,arg2)
{
  newpath
  exch xspacing mul xoffset add boxwidth 2 div add
  exch yspacing mul boxheight add
  /y exch def
  /x exch def
  x y moveto
  0 disty 2 div rlineto 
  stroke
  1 eq { x y disty 2 div add arrow } if
} def

/in % draws an input connector for the block at (arg1,arg2)
{
  newpath
  exch xspacing mul xoffset add boxwidth 2 div add
  exch yspacing mul disty 2 div sub
  /y exch def
  /x exch def
  x y moveto
  0 disty 2 div rlineto
  stroke
  1 eq { x y disty 2 div add arrow } if
} def

/hedge
{
  exch xspacing mul xoffset add boxwidth 2 div add
  exch yspacing mul boxheight 2 div sub
  /y exch def
  /x exch def
  newpath
  x y moveto
  boxwidth 2 div distx add 0 rlineto
  stroke
  1 eq
  { newpath x boxwidth 2 div distx add add y moveto
    -8 3 rlineto
    0 -6 rlineto
    8 3 rlineto
    closepath
    eofill
    stroke
  } if
} def

/vedge
{
  /ye exch def
  /ys exch def
  /xs exch def
  newpath
  xs xspacing mul xoffset add boxwidth 2 div add dup
  ys yspacing mul boxheight 2 div sub
  moveto
  ye yspacing mul boxheight 2 div sub
  lineto
  stroke
} def

/conn % connections the blocks from col `arg1' to `arg2' of row `arg3'
{
  /ys exch def
  /xe exch def
  /xs exch def
  newpath
  xs xspacing mul xoffset add boxwidth 2 div add
  ys yspacing mul disty 2 div sub
  moveto
  xspacing xe xs sub mul 0
  rlineto
  stroke
} def

% ----- main ------

boxfont setfont
1 boundaspect scale
(EventBase) cw
(BaseGlobalEvent) cw
(Event) cw
(BaseGlobalEventTemplate< Derived >) cw
(BaseGlobalEventTemplate< GlobalEvent >) cw
(BaseGlobalEventTemplate< GlobalSyncEvent >) cw
(TickEvent) cw
(DCacheCompletionEvent) cw
(LdWritebackEvent) cw
(BarrierEvent) cw
(TickEvent) cw
(ConsumerEvent) cw
(CountedDrainEvent) cw
(CountedExitEvent) cw
(CpuEvent) cw
(TrapEvent) cw
(FinishTranslationEvent) cw
(EndQuiesceEvent) cw
(DoneEvent) cw
(TxEvent) cw
(EventWrapper< T, F >) cw
(EventWrapper< DescCache,&DescCache::fetchComplete >) cw
(EventWrapper< DescCache,&DescCache::fetchDescriptors1 >) cw
(EventWrapper< DescCache,&DescCache::wbComplete >) cw
(EventWrapper< DescCache,&DescCache::writeback1 >) cw
(ActivateThreadEvent) cw
(DeallocateContextEvent) cw
(TickEvent) cw
(DmaDoneEvent) cw
(DCacheCompletionEvent) cw
(CPUEvent) cw
(TickEvent) cw
(FUCompletion) cw
(CounterEvent) cw
(LocalSimLoopExitEvent) cw
(WritebackEvent) cw
(TrapEvent) cw
(RTCEvent) cw
(RTCTickEvent) cw
(MemCntrlEvent) cw
(TickEvent) cw
(CP0Event) cw
(CP0Event) cw
(TickEvent) cw
(TickEvent< Impl >) cw
(StoreCompletionEvent) cw
(WritebackEvent) cw
(PostIntEvent) cw
(PythonEvent) cw
(ResourceEvent) cw
(ResPoolEvent) cw
(DirectedStartEvent) cw
(RubyEvent) cw
(CheckStartEvent) cw
(SequencerWakeupEvent) cw
(IprEvent) cw
(TickEvent) cw
(IntrEvent) cw
(PostVIntEvent) cw
/boxwidth boxwidth marginwidth 2 mul add def
/xspacing boxwidth distx add def
/yspacing boxheight disty add def
/scalefactor 
  boxwidth cols mul distx cols 1 sub mul add
  boxheight rows mul disty rows 1 sub mul add boundaspect mul 
  max def
boundx scalefactor div boundy scalefactor div scale

% ----- classes -----

 (EventBase) 1 54 box
 (BaseGlobalEvent) 0 53 box
 (Event) 2 53 box
 (BaseGlobalEventTemplate< Derived >) 1 52 box
 (BaseGlobalEventTemplate< GlobalEvent >) 1 51 box
1 51 mark
 (BaseGlobalEventTemplate< GlobalSyncEvent >) 1 50 box
1 50 mark
 (TickEvent) 3 52 box
 (DCacheCompletionEvent) 3 51 box
 (LdWritebackEvent) 3 50 box
 (BarrierEvent) 3 49 box
3 49 mark
 (TickEvent) 3 48 box
 (ConsumerEvent) 3 47 box
 (CountedDrainEvent) 3 46 box
 (CountedExitEvent) 3 45 box
 (CpuEvent) 3 44 box
3 44 mark
 (TrapEvent) 3 43 box
 (FinishTranslationEvent) 3 42 box
 (EndQuiesceEvent) 3 41 box
 (DoneEvent) 3 40 box
 (TxEvent) 3 39 box
 (EventWrapper< T, F >) 3 38 box
 (EventWrapper< DescCache,&DescCache::fetchComplete >) 3 37 box
 (EventWrapper< DescCache,&DescCache::fetchDescriptors1 >) 3 36 box
 (EventWrapper< DescCache,&DescCache::wbComplete >) 3 35 box
 (EventWrapper< DescCache,&DescCache::writeback1 >) 3 34 box
 (ActivateThreadEvent) 3 33 box
 (DeallocateContextEvent) 3 32 box
 (TickEvent) 3 31 box
 (DmaDoneEvent) 3 30 box
 (DCacheCompletionEvent) 3 29 box
 (CPUEvent) 3 28 box
 (TickEvent) 3 27 box
 (FUCompletion) 3 26 box
 (CounterEvent) 3 25 box
 (LocalSimLoopExitEvent) 3 24 box
 (WritebackEvent) 3 23 box
 (TrapEvent) 3 22 box
 (RTCEvent) 3 21 box
 (RTCTickEvent) 3 20 box
 (MemCntrlEvent) 3 19 box
 (TickEvent) 3 18 box
 (CP0Event) 3 17 box
 (CP0Event) 3 16 box
 (TickEvent) 3 15 box
 (TickEvent< Impl >) 3 14 box
 (StoreCompletionEvent) 3 13 box
 (WritebackEvent) 3 12 box
 (PostIntEvent) 3 11 box
 (PythonEvent) 3 10 box
 (ResourceEvent) 3 9 box
3 9 mark
 (ResPoolEvent) 3 8 box
 (DirectedStartEvent) 3 7 box
 (RubyEvent) 3 6 box
 (CheckStartEvent) 3 5 box
 (SequencerWakeupEvent) 3 4 box
 (IprEvent) 3 3 box
 (TickEvent) 3 2 box
3 2 mark
 (IntrEvent) 3 1 box
 (PostVIntEvent) 3 0 box

% ----- relations -----

solid
1 1 53.25 out
solid
0 2 54 conn
solid
0 0 53.75 in
solid
1 0 52.25 out
solid
0 2 53.75 in
solid
1 2 52.25 out
solid
0 0 52.5 hedge
solid
0 0 51.5 hedge
solid
0 0 50.5 hedge
solid
0 53 50.5 vedge
solid
0 2 52.5 hedge
solid
0 2 51.5 hedge
solid
0 2 50.5 hedge
solid
0 2 49.5 hedge
solid
0 2 48.5 hedge
solid
0 2 47.5 hedge
solid
0 2 46.5 hedge
solid
0 2 45.5 hedge
solid
0 2 44.5 hedge
solid
0 2 43.5 hedge
solid
0 2 42.5 hedge
solid
0 2 41.5 hedge
solid
0 2 40.5 hedge
solid
0 2 39.5 hedge
solid
0 2 38.5 hedge
solid
0 2 37.5 hedge
solid
0 2 36.5 hedge
solid
0 2 35.5 hedge
solid
0 2 34.5 hedge
solid
0 2 33.5 hedge
solid
0 2 32.5 hedge
solid
0 2 31.5 hedge
solid
0 2 30.5 hedge
solid
0 2 29.5 hedge
solid
0 2 28.5 hedge
solid
0 2 27.5 hedge
solid
0 2 26.5 hedge
solid
0 2 25.5 hedge
solid
0 2 24.5 hedge
solid
0 2 23.5 hedge
solid
0 2 22.5 hedge
solid
0 2 21.5 hedge
solid
0 2 20.5 hedge
solid
0 2 19.5 hedge
solid
0 2 18.5 hedge
solid
0 2 17.5 hedge
solid
0 2 16.5 hedge
solid
0 2 15.5 hedge
solid
0 2 14.5 hedge
solid
0 2 13.5 hedge
solid
0 2 12.5 hedge
solid
0 2 11.5 hedge
solid
0 2 10.5 hedge
solid
0 2 9.5 hedge
solid
0 2 8.5 hedge
solid
0 2 7.5 hedge
solid
0 2 6.5 hedge
solid
0 2 5.5 hedge
solid
0 2 4.5 hedge
solid
0 2 3.5 hedge
solid
0 2 2.5 hedge
solid
0 2 1.5 hedge
solid
0 2 0.5 hedge
solid
2 53 0.5 vedge
