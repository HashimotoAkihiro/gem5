// -*- mode:c++ -*-

// Copyright (c) 2007 MIPS Technologies, Inc.
// All rights reserved.
//

////////////////////////////////////////////////////////////////////
//
// Memory-format instructions
//

output header {{
    /**
     * Base class for general Mips memory-format instructions.
     */
    class SMemory : public MipsStaticInst
    {
      protected:
        /// Memory request flags.  See mem_req_base.hh.
        Request::Flags memAccessFlags;

        /// Displacement for EA calculation (signed).
        int32_t disp;

        /// Constructor
        SMemory(const char *mnem, MachInst _machInst, OpClass __opClass)
            : MipsStaticInst(mnem, _machInst, __opClass),
              disp(sext<16>(OFFSET))
        {
        }

        std::string
        generateDisassembly(Addr pc, const SymbolTable *symtab) const;
    };

     /**
     * Base class for a few miscellaneous memory-format insts
     * that don't interpret the disp field
     */
     //dummy(LQ,SQ don't use.)
    class SMemoryNoDisp : public SMemory
    {
      protected:
        /// Constructor
        SMemoryNoDisp(const char *mnem, ExtMachInst _machInst, OpClass __opClass)
            : SMemory(mnem, _machInst, __opClass)
        {
        }

        std::string
        generateDisassembly(Addr pc, const SymbolTable *symtab) const;
    };
}};

output decoder {{
    std::string
    SMemory::generateDisassembly(Addr pc, const SymbolTable *symtab) const
    {
        return csprintf("%-10s %c%d, %d(r%d)", mnemonic,
                        flags[IsFloating] ? 'f' : 'r', RT, disp, RS);
    }

    //dummy
    std::string
    SMemoryNoDisp::generateDisassembly(Addr pc, const SymbolTable *symtab) const
    {
        return csprintf("%-10s %c%d, r%d(r%d)", mnemonic,
                        flags[IsFloating] ? 'f' : 'r',
                        flags[IsFloating] ? FD : RD,
                        RS, RT);
    }

}};

output header {{
    uint64_t getMemData(%(CPU_exec_context)s *xc, Packet *packet);

}};

output exec {{
    /** return data in cases where there the size of data is only
        known in the packet
    */
    uint64_t getMemData(CPU_EXEC_CONTEXT *xc, Packet *packet) {
        switch (packet->getSize())
        {
          case 16:
            return packet->get<qword128_t>();

          default:
            std::cerr << "bad store data size = " << packet->getSize() << std::endl;

            assert(0);
            return 0;
        }
    }


}};

def template QuadLoadStoreDeclare {{
    /**
     * Static instruction class for "%(mnemonic)s".
     */
    class %(class_name)s : public %(base_class)s
    {
      public:

        /// Constructor.
        %(class_name)s(ExtMachInst machInst);

        %(BasicExecDeclare)s

        %(QuadEACompDeclare)s

        %(QuadInitiateAccDeclare)s

        %(QuadCompleteAccDeclare)s
    };
}};

def template QuadEACompDeclare {{
    Fault eaComp(%(CPU_exec_context)s *, Trace::InstRecord *) const;
}};

def template QuadInitiateAccDeclare {{
    Fault initiateAcc(%(CPU_exec_context)s *, Trace::InstRecord *) const;
}};


def template QuadCompleteAccDeclare {{
    Fault completeAcc(Packet *, %(CPU_exec_context)s *, Trace::InstRecord *) const;
}};

def template QuadLoadStoreConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst)
         : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(constructor)s;
    }
}};


def template QuadEACompExecute {{
    Fault
    %(class_name)s::eaComp(CPU_EXEC_CONTEXT *xc,
                                   Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        if (this->isFloating()) {
            %(fp_enable_check)s;

            if(fault != NoFault)
                return fault;
        }

        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        // NOTE: Trace Data is written using execute or completeAcc templates
        if (fault == NoFault) {
            xc->setEA(EA);
        }

        return fault;
    }
}};

def template QuadLoadExecute {{
    Fault %(class_name)s::execute(CPU_EXEC_CONTEXT *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        if (this->isFloating()) {
            %(fp_enable_check)s;

            if(fault != NoFault)
                return fault;
        }

        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            fault = readMemAtomic(xc, traceData, EA, SMem.data, memAccessFlags);
            %(memacc_code)s;
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};


def template QuadLoadInitiateAcc {{
    Fault %(class_name)s::initiateAcc(CPU_EXEC_CONTEXT *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        if (this->isFloating()) {
            %(fp_enable_check)s;

            if(fault != NoFault)
                return fault;
        }

        %(op_src_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            fault = readMemTiming(xc, traceData, EA, SMem.data, memAccessFlags);
        }

        return fault;
    }
}};

def template QuadLoadCompleteAcc {{
    Fault %(class_name)s::completeAcc(Packet *pkt,
                                      CPU_EXEC_CONTEXT *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        if (this->isFloating()) {
            %(fp_enable_check)s;

            if(fault != NoFault)
                return fault;
        }

        %(op_decl)s;
        %(op_rd)s;

        getMem(pkt, SMem.data, traceData);

        if (fault == NoFault) {
            %(memacc_code)s;
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};

def template QuadStoreExecute {{
    Fault %(class_name)s::execute(CPU_EXEC_CONTEXT *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        %(fp_enable_check)s;
        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            %(memacc_code)s;
        }

        if (fault == NoFault) {
            fault = writeMemAtomic(xc, traceData, SMem.data, EA, memAccessFlags,
                    NULL);
        }

        if (fault == NoFault) {
            %(postacc_code)s;
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};


def template QuadStoreCondExecute {{
    Fault %(class_name)s::execute(CPU_EXEC_CONTEXT *xc,
                                  Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;
        uint64_t write_result = 0;

        %(fp_enable_check)s;
        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            %(memacc_code)s;
        }

        if (fault == NoFault) {
            fault = writeMemAtomic(xc, traceData, SMem.data, EA, memAccessFlags,
                    &write_result);
        }

        if (fault == NoFault) {
            %(postacc_code)s;
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};

def template QuadStoreInitiateAcc {{
    Fault %(class_name)s::initiateAcc(CPU_EXEC_CONTEXT *xc,
                                      Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        %(fp_enable_check)s;
        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            %(memacc_code)s;
        }

        if (fault == NoFault) {
            fault = writeMemTiming(xc, traceData, SMem.data, EA, memAccessFlags,
                    NULL);
        }

        return fault;
    }
}};


def template QuadStoreCompleteAcc {{
    Fault %(class_name)s::completeAcc(Packet *pkt,
                                      CPU_EXEC_CONTEXT *xc,
                                      Trace::InstRecord *traceData) const
    {
        return NoFault;
    }
}};

def template QuadStoreCondCompleteAcc {{
    Fault %(class_name)s::completeAcc(Packet *pkt,
                                      CPU_EXEC_CONTEXT *xc,
                                      Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        %(fp_enable_check)s;
        %(op_dest_decl)s;

        uint64_t write_result = pkt->req->getExtraData();

        if (fault == NoFault) {
            %(postacc_code)s;
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};

def format QuadLoadMemory(memacc_code, ea_code = {{ EA = Rs + disp; }},
                     mem_flags = [], inst_flags = []) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        LoadStoreBase(name, Name, ea_code, memacc_code, mem_flags, inst_flags,
                      decode_template = ImmNopCheckDecode,
		      base_class = 'SMemory',
                      exec_template_base = 'QuadLoad',quad_flag=1)
}};


def format QuadStoreMemory(memacc_code, ea_code = {{ EA = Rs + disp; }},
                     mem_flags = [], inst_flags = []) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        LoadStoreBase(name, Name, ea_code, memacc_code, mem_flags, inst_flags,
		      base_class = 'SMemory',
                      exec_template_base = 'QuadStore',quad_flag=1)
}};

def format QuadLoadIndexedMemory(memacc_code, ea_code = {{ EA = Rs + Rt; }},
                     mem_flags = [], inst_flags = []) {{
    inst_flags += ['IsIndexed']
    (header_output, decoder_output, decode_block, exec_output) = \
        LoadStoreBase(name, Name, ea_code, memacc_code, mem_flags, inst_flags,
                      decode_template = ImmNopCheckDecode,
		      base_class = 'SMemory',
                      exec_template_base = 'QuadLoad',quad_flag=1)
}};

def format QuadStoreIndexedMemory(memacc_code, ea_code = {{ EA = Rs + Rt; }},
                     mem_flags = [], inst_flags = []) {{
    inst_flags += ['IsIndexed']
    (header_output, decoder_output, decode_block, exec_output) = \
        LoadStoreBase(name, Name, ea_code, memacc_code, mem_flags, inst_flags,
		      base_class = 'SMemory',
                      exec_template_base = 'QuadStore',quad_flag=1)
}};


def format QuadLoadUnalignedMemory(memacc_code, ea_code = {{ EA = (Rs + disp) & ~3; }},
                     mem_flags = [], inst_flags = []) {{
    decl_code = '''
        uint32_t mem_word = Mem_uw;
        uint32_t unalign_addr = Rs + disp;
        uint32_t byte_offset = unalign_addr & 3;
        if (GuestByteOrder == BigEndianByteOrder)
            byte_offset ^= 3;
    '''

    memacc_code = decl_code + memacc_code

    (header_output, decoder_output, decode_block, exec_output) = \
        LoadStoreBase(name, Name, ea_code, memacc_code, mem_flags, inst_flags,
                      decode_template = ImmNopCheckDecode,
		      base_class = 'SMemory',
                      exec_template_base = 'QuadLoad',quad_flag=1)
}};



def format QuadStoreCond(memacc_code, postacc_code,
                     ea_code = {{ EA = Rs + disp; }},
                     mem_flags = [], inst_flags = []) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        LoadStoreBase(name, Name, ea_code, memacc_code, mem_flags, inst_flags,
		      base_class = 'SMemory',
                      postacc_code, exec_template_base = 'QuadStoreCond',quad_flag=1)
}};

